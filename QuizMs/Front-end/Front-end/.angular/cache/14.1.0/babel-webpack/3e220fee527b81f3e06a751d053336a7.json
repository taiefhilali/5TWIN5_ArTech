{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction removeStyles(_document, platformId) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => {\n      if (isPlatformBrowser(platformId)) {\n        /** @type {?} */\n        const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n        // RegExp constructor should only be used if passing a variable to the constructor.\n        // When using static regular expression it is more performant to use reg exp literal.\n        // This is also needed to provide Safari 9 compatibility, please see\n        // https://stackoverflow.com/questions/37919802 for more discussion.\n        /** @type {?} */\n        const classRegex = /\\bflex-layout-.+?\\b/g;\n        elements.forEach(\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        el => {\n          el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n        });\n      }\n    }\n  );\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\nconst BROWSER_PROVIDER = {\n  provide: /** @type {?} */APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {}\nCoreModule.ɵfac = function CoreModule_Factory(t) {\n  return new (t || CoreModule)();\n};\nCoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CoreModule\n});\nCoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [BROWSER_PROVIDER]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param {?=} matches whether the mediaQuery is currently activated\n   * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n   * @param {?=} suffix e.g. GtSM, Md, GtLg\n   * @param {?=} priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /**\n   * Create an exact copy of the MediaChange\n   * @return {?}\n   */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   * @param {?} element\n   * @param {?} style\n   * @param {?} value\n   * @return {?}\n   */\n  addStyleToElement(element, style, value) {\n    /** @type {?} */\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   * @return {?}\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   * @param {?} el\n   * @param {?} styleName\n   * @return {?}\n   */\n  getStyleForElement(el, styleName) {\n    /** @type {?} */\n    const styles = this.stylesheet.get(el);\n    /** @type {?} */\n    let value = '';\n    if (styles) {\n      /** @type {?} */\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\n/** @nocollapse */\nStylesheetMap.ɵprov = ɵɵdefineInjectable({\n  factory: function StylesheetMap_Factory() {\n    return new StylesheetMap();\n  },\n  token: StylesheetMap,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: []\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => DEFAULT_CONFIG\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => false\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => null\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = /** @type {?} */source.suffix;\n    dest.priority = /** @type {?} */source.priority;\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(\n  /**\n  * @param {?} x\n  * @return {?}\n  */\n  x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  if (wrap === INLINE) {\n    wrap = inline !== INLINE ? inline : '';\n    inline = INLINE;\n  }\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BaseDirective2 {\n  /**\n   * @protected\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /**\n     * The most recently used styles for the builder\n     */\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /**\n     * Cache map for style computation\n     */\n    this.styleCache = new Map();\n  }\n  /**\n   * Access to host element's parent DOM node\n   * @protected\n   * @return {?}\n   */\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /**\n   * Access to the HTMLElement for the directive\n   * @protected\n   * @return {?}\n   */\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /**\n   * Access to the activated value for the directive\n   * @return {?}\n   */\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  /**\n   * For \\@Input changes\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        /** @type {?} */\n        const bp = key.split('.').slice(1).join('.');\n        /** @type {?} */\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /**\n   * Register with central marshaller service\n   * @protected\n   * @param {?=} extraTriggers\n   * @return {?}\n   */\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /**\n   * Add styles to the element using predefined style builder\n   * @protected\n   * @param {?} input\n   * @param {?=} parent\n   * @return {?}\n   */\n  addStyles(input, parent) {\n    /** @type {?} */\n    const builder = this.styleBuilder;\n    /** @type {?} */\n    const useCache = builder.shouldCache;\n    /** @type {?} */\n    let genStyles = this.styleCache.get(input);\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n    this.mru = Object.assign({}, genStyles);\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /**\n   * Remove generated styles from an element using predefined style builder\n   * @protected\n   * @return {?}\n   */\n  clearStyles() {\n    Object.keys(this.mru).forEach(\n    /**\n    * @param {?} k\n    * @return {?}\n    */\n    k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n  /**\n   * Force trigger style updates on DOM element\n   * @protected\n   * @return {?}\n   */\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   * @protected\n   * @param {?} target\n   * @param {?=} addIfMissing\n   * @return {?}\n   */\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        /** @type {?} */\n        const style = buildLayoutCSS(value);\n        /** @type {?} */\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n      return value.trim();\n    }\n    return 'row';\n  }\n  /**\n   * @protected\n   * @param {?} target\n   * @return {?}\n   */\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @protected\n   * @param {?} style\n   * @param {?=} value\n   * @param {?=} element\n   * @return {?}\n   */\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n  /**\n   * @protected\n   * @param {?} val\n   * @param {?} bp\n   * @return {?}\n   */\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n  /**\n   * @protected\n   * @param {?} input\n   * @return {?}\n   */\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\nBaseDirective2.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n  /** @type {?} */\n  let first = part.length > 0 ? part.charAt(0) : '';\n  /** @type {?} */\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n  list.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n  /** @type {?} */\n  const dict = {};\n  defaults.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(\n  /**\n  * @param {?} k\n  * @return {?}\n  */\n  k => dict[k]));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => {\n    /** @type {?} */\n    const breakpoints = inject(BREAKPOINT);\n    /** @type {?} */\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    /** @type {?} */\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => Array.isArray(v) ? v : [v]));\n    /** @type {?} */\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortDescendingPriority(a, b) {\n  /** @type {?} */\n  const priorityA = a ? a.priority || 0 : 0;\n  /** @type {?} */\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortAscendingPriority(a, b) {\n  /** @type {?} */\n  const pA = a.priority || 0;\n  /** @type {?} */\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  /**\n   * @param {?} list\n   */\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   * @param {?} alias\n   * @return {?}\n   */\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias,\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.alias == alias);\n  }\n  /**\n   * @param {?} query\n   * @return {?}\n   */\n  findByQuery(query) {\n    return this.findWithPredicate(query,\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery == query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   * @return {?}\n   */\n  get overlappings() {\n    return this.items.filter(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.overlapping == true);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   * @return {?}\n   */\n  get aliases() {\n    return this.items.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   * @return {?}\n   */\n  get suffixes() {\n    return this.items.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => !!it.suffix ? it.suffix : '');\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   * @private\n   * @param {?} key\n   * @param {?} searchFn\n   * @return {?}\n   */\n  findWithPredicate(key, searchFn) {\n    /** @type {?} */\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n  }\n}\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(ɵngcc0.ɵɵinject(BREAKPOINTS));\n};\n/** @nocollapse */\nBreakPointRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function BreakPointRegistry_Factory() {\n    return new BreakPointRegistry(ɵɵinject(BREAKPOINTS));\n  },\n  token: BreakPointRegistry,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [{\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [BREAKPOINTS]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /**\n     * Initialize source with 'all' so all non-responsive APIs trigger style updates\n     */\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   * @return {?}\n   */\n  get activations() {\n    /** @type {?} */\n    const results = [];\n    this.registry.forEach(\n    /**\n    * @param {?} mql\n    * @param {?} key\n    * @return {?}\n    */\n    (mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  isActive(mediaQuery) {\n    /** @type {?} */\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   * @param {?=} mqList\n   * @param {?=} filterOthers\n   * @return {?}\n   */\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      /** @type {?} */\n      const matchMedia$ = this._observable$.pipe(filter(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n      /** @type {?} */\n      const registration$ = new Observable(\n      /**\n      * @param {?} observer\n      * @return {?}\n      */\n      observer => {\n        // tslint:disable-line:max-line-length\n        /** @type {?} */\n        const matches = this.registerQuery(mqList);\n        if (matches.length) {\n          /** @type {?} */\n          const lastChange = /** @type {?} */matches.pop();\n          matches.forEach(\n          /**\n          * @param {?} e\n          * @return {?}\n          */\n          e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  registerQuery(mediaQuery) {\n    /** @type {?} */\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    /** @type {?} */\n    const matches = [];\n    buildQueryCss(list, this._document);\n    list.forEach(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      /** @type {?} */\n      const onMQLEvent =\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => {\n        this._zone.run(\n        /**\n        * @return {?}\n        */\n        () => this.source.next(new MediaChange(e.matches, query)));\n      };\n      /** @type {?} */\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(\n        /**\n        * @return {?}\n        */\n        () => /** @type {?} */mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @protected\n   * @param {?} query\n   * @return {?}\n   */\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\nMatchMedia.ɵfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\nMatchMedia.ɵprov = ɵɵdefineInjectable({\n  factory: function MatchMedia_Factory() {\n    return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MatchMedia,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\nfunction buildQueryCss(mediaQueries, _document) {\n  /** @type {?} */\n  const list = mediaQueries.filter(\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    /** @type {?} */\n    const query = list.join(', ');\n    try {\n      /** @type {?} */\n      const styleEl = _document.createElement('style');\n      styleEl.setAttribute('type', 'text/css');\n      if (! /** @type {?} */styleEl.styleSheet) {\n        /** @type {?} */\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n      /** @type {?} */_document.head.appendChild(styleEl);\n      // Store in private global registry\n      list.forEach(\n      /**\n      * @param {?} mq\n      * @return {?}\n      */\n      mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\nfunction constructMql(query, isBrowser) {\n  /** @type {?} */\n  const canListen = isBrowser && !! /** @type {?} */window.matchMedia('all').addListener;\n  return canListen ? /** @type {?} */window.matchMedia(query) : /** @type {?} */{\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener:\n    /**\n    * @return {?}\n    */\n    () => {},\n    removeListener:\n    /**\n    * @return {?}\n    */\n    () => {},\n    onchange: null,\n    /**\n     * @return {?}\n     */\n    addEventListener() {},\n    /**\n     * @return {?}\n     */\n    removeEventListener() {},\n    /**\n     * @return {?}\n     */\n    dispatchEvent() {\n      return false;\n    }\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  // Allow fallback to overlapping mediaQueries\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   * @param {?} _breakpoints\n   */\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    // Used for testing BreakPoint registrations\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   * @return {?}\n   */\n  clearAll() {\n    this.registry.forEach(\n    /**\n    * @param {?} mql\n    * @return {?}\n    */\n    mql => {\n      /** @type {?} */mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /**\n   * Feature to support manual, simulated activation of a mediaQuery.\n   * @param {?} mediaQuery\n   * @param {?=} useOverlaps\n   * @return {?}\n   */\n  activate(mediaQuery, useOverlaps = false) {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n   * @param {?} queryOrAlias\n   * @return {?}\n   */\n  _validateQuery(queryOrAlias) {\n    /** @type {?} */\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return bp && bp.mediaQuery || queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   * @private\n   * @param {?} mediaQuery\n   * @param {?} useOverlaps\n   * @return {?}\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      /** @type {?} */\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      /** @type {?} */\n      const alias = bp ? bp.alias : 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   * @private\n   * @param {?} aliases\n   * @return {?}\n   */\n  _activateByAlias(aliases) {\n    /** @type {?} */\n    const activate =\n    /**\n    * @param {?} alias\n    * @return {?}\n    */\n    alias => {\n      /** @type {?} */\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   * @private\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    /** @type {?} */\n    const mql = /** @type {?} */this.registry.get(mediaQuery);\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Deactivate all current MQLs and reset the buffer\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @return {THIS}\n   */\n  _deactivateAll() {\n    /** @type {?} */this.registry.forEach(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => {\n      /** @type {?} */it.deactivate();\n    });\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Insure the mediaQuery is registered with MatchMedia\n   * @private\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @protected\n   * @param {?} query\n   * @return {?}\n   */\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n}\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(BreakPointRegistry));\n};\nMockMatchMedia.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.ɵfac\n});\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: BreakPointRegistry\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n  /**\n   * @param {?} _mediaQuery\n   */\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n  get matches() {\n    return this._isActive;\n  }\n  /**\n   * @return {?}\n   */\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   * @return {?}\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   * @return {?}\n   */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(\n      /**\n      * @param {?} callback\n      * @return {?}\n      */\n      callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(this, /** @type {?} */{\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Notify all listeners that 'matches === false'\n   * @return {?}\n   */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(\n      /**\n      * @param {?} callback\n      * @return {?}\n      */\n      callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(this, /** @type {?} */{\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Add a listener to our internal list to activate later\n   * @param {?} listener\n   * @return {?}\n   */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      /** @type {?} */\n      const cb = /** @type {?} */listener;\n      cb.call(this, /** @type {?} */{\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /**\n   * Don't need to remove listeners in the testing environment\n   * @param {?} _\n   * @return {?}\n   */\n  removeListener(_) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  addEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  removeEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @return {?}\n   */\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\nconst MockMatchMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRINT = 'print';\n/** @type {?} */\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n  /**\n   * @param {?} breakpoints\n   * @param {?} layoutConfig\n   * @param {?} _document\n   */\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document;\n    // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n    this.registeredBeforeAfterPrintHooks = false;\n    // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    /**\n     * Is this service currently in Print-mode ?\n     */\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /**\n   * Add 'print' mediaQuery: to listen for matchMedia activations\n   * @param {?} queries\n   * @return {?}\n   */\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /**\n   * Is the MediaChange event for any 'print' \\@media\n   * @param {?} e\n   * @return {?}\n   */\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /**\n   * What is the desired mqAlias to use while printing?\n   * @return {?}\n   */\n  get printAlias() {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n  /**\n   * Lookup breakpoints associated with print aliases.\n   * @return {?}\n   */\n  get printBreakPoints() {\n    return (/** @type {?} */this.printAlias.map(\n      /**\n      * @param {?} alias\n      * @return {?}\n      */\n      alias => this.breakpoints.findByAlias(alias)).filter(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      bp => bp !== null)\n    );\n  }\n  /**\n   * Lookup breakpoint associated with mediaQuery\n   * @param {?} __0\n   * @return {?}\n   */\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    /** @type {?} */\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    /** @type {?} */\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /**\n   * Update event with printAlias mediaQuery information\n   * @param {?} event\n   * @return {?}\n   */\n  updateEvent(event) {\n    /** @type {?} */\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  /**\n   * @private\n   * @param {?} target\n   * @return {?}\n   */\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n    this.registeredBeforeAfterPrintHooks = true;\n    /** @type {?} */\n    const beforePrintListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n    /** @type {?} */\n    const afterPrintListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @param {?} target\n   * @return {?} pipeable filter predicate\n   */\n  interceptEvents(target) {\n    this.registerBeforeAfterPrintHooks(target);\n    return (\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this.isPrintEvent(event)) {\n          if (event.matches && !this.isPrinting) {\n            this.startPrinting(target, this.getEventBreakpoints(event));\n            target.updateStyles();\n          } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n            this.stopPrinting(target);\n            target.updateStyles();\n          }\n        } else {\n          this.collectActivations(event);\n        }\n      }\n    );\n  }\n  /**\n   * Stop mediaChange event propagation in event streams\n   * @return {?}\n   */\n  blockPropagation() {\n    return (\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        return !(this.isPrinting || this.isPrintEvent(event));\n      }\n    );\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   * @protected\n   * @param {?} target\n   * @param {?} bpList\n   * @return {?}\n   */\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /**\n   * For any print de-activations, reset the entire print queue\n   * @protected\n   * @param {?} target\n   * @return {?}\n   */\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   * @param {?} event\n   * @return {?}\n   */\n  collectActivations(event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {\n          // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n  /**\n   * Teardown logic for the service.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n}\nPrintHook.ɵfac = function PrintHook_Factory(t) {\n  return new (t || PrintHook)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\nPrintHook.ɵprov = ɵɵdefineInjectable({\n  factory: function PrintHook_Factory() {\n    return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT));\n  },\n  token: PrintHook,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nPrintHook.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  constructor() {\n    /**\n     * Sorted queue with prioritized print breakpoints\n     */\n    this.printBreakpoints = [];\n  }\n  /**\n   * @param {?} bpList\n   * @return {?}\n   */\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /**\n   * Add Print breakpoint to queue\n   * @param {?} bp\n   * @return {?}\n   */\n  addBreakpoint(bp) {\n    if (!!bp) {\n      /** @type {?} */\n      const bpInList = this.printBreakpoints.find(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /**\n   * Restore original activated breakpoints and clear internal caches\n   * @return {?}\n   */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\nfunction isPrintBreakPoint(bp) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} hook\n   */\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /**\n     * Filter MediaChange notifications for overlapping breakpoints\n     */\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes.length > 0), map(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes[0]));\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  // ************************************************\n  // Public Methods\n  // ************************************************\n  /**\n   * Observe changes to current activation 'list'\n   * @return {?}\n   */\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param {?} value One or more media queries (or aliases) to check.\n   * @return {?} Whether any of the media queries match.\n   */\n  isActive(value) {\n    /** @type {?} */\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(\n    /**\n    * @param {?} alias\n    * @return {?}\n    */\n    alias => {\n      /** @type {?} */\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   * @private\n   * @return {?}\n   */\n  watchActivations() {\n    /** @type {?} */\n    const queries = this.breakpoints.items.map(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   * @private\n   * @param {?} mqList\n   * @return {?}\n   */\n  buildObservable(mqList) {\n    /** @type {?} */\n    const hasChanges =\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => {\n      /** @type {?} */\n      const isValidQuery =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => change.mediaQuery.length > 0;\n      return changes.filter(isValidQuery).length > 0;\n    };\n    /** @type {?} */\n    const excludeOverlaps =\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => {\n      return !this.filterOverlaps ? changes : changes.filter(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n    /**\n     */\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => change.matches), debounceTime(0, asapScheduler), switchMap(\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   * @private\n   * @return {?}\n   */\n  findAllActivations() {\n    /** @type {?} */\n    const mergeMQAlias =\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      /** @type {?} */\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    /** @type {?} */\n    const replaceWithPrintAlias =\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n    return this.matchMedia.activations.map(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n}\nMediaObserver.ɵfac = function MediaObserver_Factory(t) {\n  return new (t || MediaObserver)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(PrintHook));\n};\n/** @nocollapse */\nMediaObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaObserver_Factory() {\n    return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook));\n  },\n  token: MediaObserver,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nMediaObserver.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}, {\n  type: PrintHook\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\nfunction toMediaQuery(query, locator) {\n  /** @type {?} */\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n  return queries.map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.split(',')).reduce(\n  /**\n  * @param {?} a1\n  * @param {?} a2\n  * @return {?}\n  */\n  (a1, a2) => a1.concat(a2)).map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class\n */\nclass MediaTrigger {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} layoutConfig\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param {?} list array of mediaQuery or alias strings\n   * @return {?}\n   */\n  activate(list) {\n    list = list.map(\n    /**\n    * @param {?} it\n    * @return {?}\n    */\n    it => it.trim()); // trim queries\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   * @return {?}\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      /** @type {?} */\n      const extractQuery =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => change.mediaQuery;\n      /** @type {?} */\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   * @private\n   * @return {?}\n   */\n  prepareAutoRestore() {\n    /** @type {?} */\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    /** @type {?} */\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n    if (enableAutoRestore) {\n      /** @type {?} */\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   * @private\n   * @return {?}\n   */\n  deactivateAll() {\n    /** @type {?} */\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   * @private\n   * @return {?}\n   */\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      /** @type {?} */\n      const toMediaChange =\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      query => new MediaChange(true, query);\n      /** @type {?} */\n      const mergeMQAlias =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   * @private\n   * @param {?} list\n   * @return {?}\n   */\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   * @private\n   * @param {?} queries\n   * @param {?=} matches\n   * @return {?}\n   */\n  simulateMediaChanges(queries, matches = true) {\n    /** @type {?} */\n    const toMediaQuery =\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      /** @type {?} */\n      const locator = this.breakpoints;\n      /** @type {?} */\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    /** @type {?} */\n    const emitChangeEvent =\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => this.emitChangeEvent(matches, query);\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   * @private\n   * @param {?} queries\n   * @param {?} matches\n   * @return {?}\n   */\n  forceRegistryMatches(queries, matches) {\n    /** @type {?} */\n    const registry = new Map();\n    queries.forEach(\n    /**\n    * @param {?} query\n    * @return {?}\n    */\n    query => {\n      registry.set(query, /** @type {?} */{\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   * @private\n   * @return {?}\n   */\n  cacheRegistryMatches() {\n    /** @type {?} */\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   * @private\n   * @return {?}\n   */\n  restoreRegistryMatches() {\n    /** @type {?} */\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   * @private\n   * @param {?} matches\n   * @param {?} query\n   * @return {?}\n   */\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n}\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n  return new (t || MediaTrigger)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\nMediaTrigger.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaTrigger_Factory() {\n    return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MediaTrigger,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nMediaTrigger.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n  for (let key in target) {\n    /** @type {?} */\n    let value = target[key] || '';\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = ['-webkit-flex', 'flex'];\n        } else if (value === 'inline-flex') {\n          target['display'] = ['-webkit-inline-flex', 'inline-flex'];\n        } else {\n          target['display'] = value;\n        }\n        break;\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StyleUtils {\n  /**\n   * @param {?} _serverStylesheet\n   * @param {?} _serverModuleLoaded\n   * @param {?} _platformId\n   * @param {?} layoutConfig\n   */\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @param {?} element\n   * @param {?} style\n   * @param {?=} value\n   * @return {?}\n   */\n  applyStyleToElement(element, style, value = null) {\n    /** @type {?} */\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   * @param {?} style\n   * @param {?=} elements\n   * @return {?}\n   */\n  applyStyleToElements(style, elements = []) {\n    /** @type {?} */\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(\n    /**\n    * @param {?} el\n    * @return {?}\n    */\n    el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   * @param {?} target\n   * @return {?}\n   */\n  getFlowDirection(target) {\n    /** @type {?} */\n    const query = 'flex-direction';\n    /** @type {?} */\n    let value = this.lookupStyle(target, query);\n    /** @type {?} */\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  /**\n   * @param {?} target\n   * @return {?}\n   */\n  hasWrap(target) {\n    /** @type {?} */\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   * @param {?} element\n   * @param {?} attribute\n   * @return {?}\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) || '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} inlineOnly\n   * @return {?}\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    /** @type {?} */\n    let value = '';\n    if (element) {\n      /** @type {?} */\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   * @private\n   * @param {?} styles\n   * @param {?} element\n   * @return {?}\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      /** @type {?} */\n      const el = styles[key];\n      /** @type {?} */\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} styleValue\n   * @return {?}\n   */\n  _setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  _getServerStyle(element, styleName) {\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _readStyleAttribute(element) {\n    /** @type {?} */\n    const styleMap = {};\n    /** @type {?} */\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      /** @type {?} */\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        /** @type {?} */\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          /** @type {?} */\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          /** @type {?} */\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} styleMap\n   * @return {?}\n   */\n  _writeStyleAttribute(element, styleMap) {\n    /** @type {?} */\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      /** @type {?} */\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\nStyleUtils.ɵfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(ɵngcc0.ɵɵinject(StylesheetMap), ɵngcc0.ɵɵinject(SERVER_TOKEN), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LAYOUT_CONFIG));\n};\n/** @nocollapse */\nStyleUtils.ɵprov = ɵɵdefineInjectable({\n  factory: function StyleUtils_Factory() {\n    return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG));\n  },\n  token: StyleUtils,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [{\n  type: StylesheetMap\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [SERVER_TOKEN]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\nclass StyleBuilder {\n  constructor() {\n    /**\n     * Whether to cache the generated output styles\n     */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   * @param {?} _input\n   * @param {?} _styles\n   * @param {?=} _parent\n   * @return {?}\n   */\n  sideEffect(_input, _styles, _parent) {}\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  /** @type {?} */\n  let parts = [grow, shrink, basis];\n  /** @type {?} */\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    /** @type {?} */\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    /** @type {?} */\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n  /**\n   * @param {?} matchMedia\n   * @param {?} breakpoints\n   * @param {?} hook\n   */\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this.activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    // special triggers to update elements\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    // callback functions to update styles\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    // callback functions to clear styles\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  /**\n   * @return {?}\n   */\n  get activatedAlias() {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param {?} mc\n   * @return {?}\n   */\n  onMediaChange(mc) {\n    /** @type {?} */\n    const bp = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param {?} element\n   * @param {?} key\n   * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   * @return {?}\n   */\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param {?} element\n   * @param {?} key\n   * @param {?=} bp\n   * @return {?}\n   */\n  getValue(element, key, bp) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  hasValue(element, key) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param {?} element the element in question\n   * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param {?} val the value for the breakpoint\n   * @param {?} bp the breakpoint suffix (empty string = default)\n   * @return {?}\n   */\n  setValue(element, key, val, bp) {\n    /** @type {?} */\n    let bpMap = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      /** @type {?} */\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    /** @type {?} */\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /**\n   * Track element value changes for a specific key\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => v.element === element && v.key === key));\n  }\n  /**\n   * update all styles for all elements on the current breakpoint\n   * @return {?}\n   */\n  updateStyles() {\n    this.elementMap.forEach(\n    /**\n    * @param {?} bpMap\n    * @param {?} el\n    * @return {?}\n    */\n    (bpMap, el) => {\n      /** @type {?} */\n      const keyMap = new Set( /** @type {?} */this.elementKeyMap.get(el));\n      /** @type {?} */\n      let valueMap = this.getActivatedValues(bpMap);\n      if (valueMap) {\n        valueMap.forEach(\n        /**\n        * @param {?} v\n        * @param {?} k\n        * @return {?}\n        */\n        (v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n      keyMap.forEach(\n      /**\n      * @param {?} k\n      * @return {?}\n      */\n      k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          /** @type {?} */\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  clearElement(element, key) {\n    /** @type {?} */\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      /** @type {?} */\n      const clearFn = /** @type {?} */builders.get(key);\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param {?} element\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n  updateElement(element, key, value) {\n    /** @type {?} */\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      /** @type {?} */\n      const updateFn = /** @type {?} */builders.get(key);\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param {?} element\n   * @return {?}\n   */\n  releaseElement(element) {\n    /** @type {?} */\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(\n      /**\n      * @param {?} s\n      * @return {?}\n      */\n      s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    /** @type {?} */\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach(\n      /**\n      * @param {?} _\n      * @param {?} s\n      * @return {?}\n      */\n      (_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param {?} element\n   * @param {?=} key\n   * @return {?}\n   */\n  triggerUpdate(element, key) {\n    /** @type {?} */\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      /** @type {?} */\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach(\n          /**\n          * @param {?} v\n          * @param {?} k\n          * @return {?}\n          */\n          (v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /**\n   * Cross-reference for HTMLElement with directive key\n   * @private\n   * @param {?} element\n   * @param {?} key\n   * @return {?}\n   */\n  buildElementKeyMap(element, key) {\n    /** @type {?} */\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   * @private\n   * @param {?} element\n   * @param {?} key\n   * @param {?} triggers\n   * @return {?}\n   */\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      /** @type {?} */\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      /** @type {?} */\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        /** @type {?} */\n        const newSubscription = merge(...triggers).subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /**\n   * Breakpoint locator by mediaQuery\n   * @private\n   * @param {?} query\n   * @return {?}\n   */\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @private\n   * @param {?} bpMap\n   * @param {?=} key\n   * @return {?}\n   */\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      /** @type {?} */\n      const activatedBp = this.activatedBreakpoints[i];\n      /** @type {?} */\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    }\n    /** @type {?} */\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   * @private\n   * @return {?}\n   */\n  observeActivations() {\n    /** @type {?} */\n    const target = /** @type {?} */ /** @type {?} */this;\n    /** @type {?} */\n    const queries = this.breakpoints.items.map(\n    /**\n    * @param {?} bp\n    * @return {?}\n    */\n    bp => bp.mediaQuery);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n}\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n  return new (t || MediaMarshaller)(ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(PrintHook));\n};\n/** @nocollapse */\nMediaMarshaller.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaMarshaller_Factory() {\n    return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook));\n  },\n  token: MediaMarshaller,\n  providedIn: \"root\"\n});\n/** @nocollapse */\nMediaMarshaller.ctorParameters = () => [{\n  type: MatchMedia\n}, {\n  type: BreakPointRegistry\n}, {\n  type: PrintHook\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\nfunction initBuilderMap(map$$1, element, key, input) {\n  if (input !== undefined) {\n    /** @type {?} */\n    let oldMap = map$$1.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map$$1.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };","map":{"version":3,"names":["APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","inject","NgZone","ɵɵdefineInjectable","ɵɵinject","DOCUMENT","isPlatformBrowser","isPlatformServer","Subject","BehaviorSubject","Observable","merge","asapScheduler","of","fromEvent","filter","debounceTime","map","switchMap","takeUntil","take","tap","ɵngcc0","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","ɵfac","CoreModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","StylesheetMap_Factory","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","LAYOUT_CONFIG","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","INLINE","LAYOUT_VALUES","buildLayoutCSS","direction","wrap","isInline","validateValue","buildCSS","toLowerCase","inline","split","find","x","validateWrapValue","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","getValue","setValue","activatedAlias","ngOnChanges","changes","Object","keys","key","indexOf","bp","slice","join","val","currentValue","ngOnDestroy","next","complete","releaseElement","init","extraTriggers","updateWithValue","bind","addStyles","input","parent","builder","useCache","shouldCache","genStyles","buildStyles","assign","applyStyleToElement","sideEffect","k","triggerUpdate","getFlexFlowDirection","target","addIfMissing","hasInlineValue","getFlowDirection","applyStyleToElements","trim","hasWrap","BaseDirective2_Factory","ɵɵinvalidFactory","ɵdir","ɵɵdefineDirective","features","ɵɵNgOnChangesFeature","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","extendObject","sources","TypeError","hasOwnProperty","ALIAS_DELIMITERS","firstUpperCase","part","first","length","charAt","remainder","toUpperCase","camelCase","name","validateSuffixes","list","mergeByAlias","defaults","custom","dict","BREAKPOINTS","breakpoints","layoutConfig","bpFlattenArray","concat","apply","v","isArray","builtIns","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","BreakPointRegistry","findByMap","items","sort","findByAlias","findWithPredicate","findByQuery","query","overlappings","it","aliases","suffixes","searchFn","response","BreakPointRegistry_Factory","ctorParameters","decorators","MatchMedia","_zone","_platformId","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","fn","constructMql","MatchMedia_Factory","undefined","ALL_STYLES","mediaQueries","styleEl","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","isBrowser","canListen","window","matchMedia","media","onchange","addEventListener","removeEventListener","dispatchEvent","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","has","deactivate","MockMediaQueryList","MockMatchMedia_Factory","_mediaQuery","_isActive","_listeners","callback","cb","call","listener","_","__","___","MockMatchMediaProvider","useClass","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","l","PrintHook_Factory","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","coerceArray","MediaObserver","hook","filterOverlaps","destroyed$","_media$","watchActivations","media$","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","findAllActivations","mergeMQAlias","replaceWithPrintAlias","MediaObserver_Factory","locator","reduce","a1","a2","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","unsubscribe","enableAutoRestore","resize$","subscribe","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","MediaTrigger_Factory","applyCssPrefixes","isNaN","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","lookupStyle","lookupInlineStyle","lookupAttributeValue","attribute","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","immediateValue","getComputedStyle","values","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","i","colonIndex","Error","substr","styleAttrValue","newValue","StyleUtils_Factory","Boolean","StyleBuilder","_input","_styles","_parent","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","MediaMarshaller","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","onMediaChange","mc","splice","updateFn","clearFn","initBuilderMap","buildElementKeyMap","watchExtraTriggers","bpMap","getActivatedValues","hasValue","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","s","add","triggers","watchers","subscription","newSubscription","activatedBp","lastHope","MediaMarshaller_Factory","map$$1","oldMap","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider"],"sources":["C:/Users/Public/Documents/Quizms/Front-end/node_modules/@angular/flex-layout/__ivy_ngcc__/esm2015/core.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction removeStyles(_document, platformId) {\n    return (/**\n     * @return {?}\n     */\n    () => {\n        if (isPlatformBrowser(platformId)) {\n            /** @type {?} */\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            /** @type {?} */\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            }));\n        }\n    });\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\nconst BROWSER_PROVIDER = {\n    provide: (/** @type {?} */ (APP_BOOTSTRAP_LISTENER)),\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.ɵfac = function CoreModule_Factory(t) { return new (t || CoreModule)(); };\nCoreModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CoreModule });\nCoreModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [BROWSER_PROVIDER] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CoreModule, [{\n        type: NgModule,\n        args: [{\n                providers: [BROWSER_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param {?=} matches whether the mediaQuery is currently activated\n     * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n     * @param {?=} suffix e.g. GtSM, Md, GtLg\n     * @param {?=} priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /**\n     * Create an exact copy of the MediaChange\n     * @return {?}\n     */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n    addStyleToElement(element, style, value) {\n        /** @type {?} */\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n    getStyleForElement(el, styleName) {\n        /** @type {?} */\n        const styles = this.stylesheet.get(el);\n        /** @type {?} */\n        let value = '';\n        if (styles) {\n            /** @type {?} */\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) { return new (t || StylesheetMap)(); };\n/** @nocollapse */ StylesheetMap.ɵprov = ɵɵdefineInjectable({ factory: function StylesheetMap_Factory() { return new StylesheetMap(); }, token: StylesheetMap, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StylesheetMap, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => DEFAULT_CONFIG)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => false)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => null)\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n    dest = dest ? dest.clone() : new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = (/** @type {?} */ (source.suffix));\n        dest.priority = (/** @type {?} */ (source.priority));\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n    let [direction, wrap, isInline] = validateValue(value);\n    return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n    value = value ? value.toLowerCase() : '';\n    let [direction, wrap, inline] = value.split(' ');\n    // First value must be the `flex-direction`\n    if (!LAYOUT_VALUES.find((/**\n     * @param {?} x\n     * @return {?}\n     */\n    x => x === direction))) {\n        direction = LAYOUT_VALUES[0];\n    }\n    if (wrap === INLINE) {\n        wrap = (inline !== INLINE) ? inline : '';\n        inline = INLINE;\n    }\n    return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n    if (!!value) {\n        switch (value.toLowerCase()) {\n            case 'reverse':\n            case 'wrap-reverse':\n            case 'reverse-wrap':\n                value = 'wrap-reverse';\n                break;\n            case 'no':\n            case 'none':\n            case 'nowrap':\n                value = 'nowrap';\n                break;\n            // All other values fallback to 'wrap'\n            default:\n                value = 'wrap';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n    return {\n        'display': inline ? 'inline-flex' : 'flex',\n        'box-sizing': 'border-box',\n        'flex-direction': direction,\n        'flex-wrap': !!wrap ? wrap : null\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BaseDirective2 {\n    /**\n     * @protected\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /**\n         * The most recently used styles for the builder\n         */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /**\n         * Cache map for style computation\n         */\n        this.styleCache = new Map();\n    }\n    /**\n     * Access to host element's parent DOM node\n     * @protected\n     * @return {?}\n     */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /**\n     * Access to the HTMLElement for the directive\n     * @protected\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     * Access to the activated value for the directive\n     * @return {?}\n     */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /**\n     * For \\@Input changes\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                /** @type {?} */\n                const bp = key.split('.').slice(1).join('.');\n                /** @type {?} */\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /**\n     * Register with central marshaller service\n     * @protected\n     * @param {?=} extraTriggers\n     * @return {?}\n     */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /**\n     * Add styles to the element using predefined style builder\n     * @protected\n     * @param {?} input\n     * @param {?=} parent\n     * @return {?}\n     */\n    addStyles(input, parent) {\n        /** @type {?} */\n        const builder = this.styleBuilder;\n        /** @type {?} */\n        const useCache = builder.shouldCache;\n        /** @type {?} */\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = Object.assign({}, genStyles);\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /**\n     * Remove generated styles from an element using predefined style builder\n     * @protected\n     * @return {?}\n     */\n    clearStyles() {\n        Object.keys(this.mru).forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => {\n            this.mru[k] = '';\n        }));\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n    }\n    /**\n     * Force trigger style updates on DOM element\n     * @protected\n     * @return {?}\n     */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @protected\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                /** @type {?} */\n                const style = buildLayoutCSS(value);\n                /** @type {?} */\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    /**\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @protected\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    /**\n     * @protected\n     * @param {?} val\n     * @param {?} bp\n     * @return {?}\n     */\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    /**\n     * @protected\n     * @param {?} input\n     * @return {?}\n     */\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseDirective2.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseDirective2, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (let source of sources) {\n        if (source != null) {\n            for (let key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n    /** @type {?} */\n    let first = part.length > 0 ? part.charAt(0) : '';\n    /** @type {?} */\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n    list.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    (bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    }));\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n    /** @type {?} */\n    const dict = {};\n    defaults.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    bp => {\n        dict[bp.alias] = bp;\n    }));\n    // Merge custom breakpoints\n    custom.forEach((/**\n     * @param {?} bp\n     * @return {?}\n     */\n    (bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    }));\n    return validateSuffixes(Object.keys(dict).map((/**\n     * @param {?} k\n     * @return {?}\n     */\n    k => dict[k])));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const breakpoints = inject(BREAKPOINT);\n        /** @type {?} */\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        /** @type {?} */\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        (v) => Array.isArray(v) ? v : [v])));\n        /** @type {?} */\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    })\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortDescendingPriority(a, b) {\n    /** @type {?} */\n    const priorityA = a ? a.priority || 0 : 0;\n    /** @type {?} */\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortAscendingPriority(a, b) {\n    /** @type {?} */\n    const pA = a.priority || 0;\n    /** @type {?} */\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    /**\n     * @param {?} list\n     */\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (/**\n         * @param {?} bp\n         * @return {?}\n         */\n        (bp) => bp.alias == alias));\n    }\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    findByQuery(query) {\n        return this.findWithPredicate(query, (/**\n         * @param {?} bp\n         * @return {?}\n         */\n        (bp) => bp.mediaQuery == query));\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     * @return {?}\n     */\n    get overlappings() {\n        return this.items.filter((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.overlapping == true));\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     * @return {?}\n     */\n    get aliases() {\n        return this.items.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.alias));\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     * @return {?}\n     */\n    get suffixes() {\n        return this.items.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => !!it.suffix ? it.suffix : ''));\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     * @private\n     * @param {?} key\n     * @param {?} searchFn\n     * @return {?}\n     */\n    findWithPredicate(key, searchFn) {\n        /** @type {?} */\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) || null;\n            this.findByMap.set(key, response);\n        }\n        return response || null;\n    }\n}\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) { return new (t || BreakPointRegistry)(ɵngcc0.ɵɵinject(BREAKPOINTS)); };\n/** @nocollapse */ BreakPointRegistry.ɵprov = ɵɵdefineInjectable({ factory: function BreakPointRegistry_Factory() { return new BreakPointRegistry(ɵɵinject(BREAKPOINTS)); }, token: BreakPointRegistry, providedIn: \"root\" });\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [BREAKPOINTS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakPointRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Inject,\n                args: [BREAKPOINTS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /**\n         * Initialize source with 'all' so all non-responsive APIs trigger style updates\n         */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     * @return {?}\n     */\n    get activations() {\n        /** @type {?} */\n        const results = [];\n        this.registry.forEach((/**\n         * @param {?} mql\n         * @param {?} key\n         * @return {?}\n         */\n        (mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        }));\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    isActive(mediaQuery) {\n        /** @type {?} */\n        const mql = this.registry.get(mediaQuery);\n        return !!mql ? mql.matches : this.registerQuery(mediaQuery).some((/**\n         * @param {?} m\n         * @return {?}\n         */\n        m => m.matches));\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     * @param {?=} mqList\n     * @param {?=} filterOthers\n     * @return {?}\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            /** @type {?} */\n            const matchMedia$ = this._observable$.pipe(filter((/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1))));\n            /** @type {?} */\n            const registration$ = new Observable((/**\n             * @param {?} observer\n             * @return {?}\n             */\n            (observer) => {\n                // tslint:disable-line:max-line-length\n                /** @type {?} */\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    /** @type {?} */\n                    const lastChange = (/** @type {?} */ (matches.pop()));\n                    matches.forEach((/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => {\n                        observer.next(e);\n                    }));\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            }));\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    registerQuery(mediaQuery) {\n        /** @type {?} */\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        /** @type {?} */\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => {\n            /** @type {?} */\n            const onMQLEvent = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                this._zone.run((/**\n                 * @return {?}\n                 */\n                () => this.source.next(new MediaChange(e.matches, query))));\n            });\n            /** @type {?} */\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push((/**\n                 * @return {?}\n                 */\n                () => (/** @type {?} */ (mql)).removeListener(onMQLEvent)));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        }));\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\nMatchMedia.ɵfac = function MatchMedia_Factory(t) { return new (t || MatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */ MatchMedia.ɵprov = ɵɵdefineInjectable({ factory: function MatchMedia_Factory() { return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT)); }, token: MatchMedia, providedIn: \"root\" });\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatchMedia, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    /** @type {?} */\n    const list = mediaQueries.filter((/**\n     * @param {?} it\n     * @return {?}\n     */\n    it => !ALL_STYLES[it]));\n    if (list.length > 0) {\n        /** @type {?} */\n        const query = list.join(', ');\n        try {\n            /** @type {?} */\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!((/** @type {?} */ (styleEl))).styleSheet) {\n                /** @type {?} */\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            (/** @type {?} */ (_document.head)).appendChild(styleEl);\n            // Store in private global registry\n            list.forEach((/**\n             * @param {?} mq\n             * @return {?}\n             */\n            mq => ALL_STYLES[mq] = styleEl));\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\nfunction constructMql(query, isBrowser) {\n    /** @type {?} */\n    const canListen = isBrowser && !!((/** @type {?} */ (window))).matchMedia('all').addListener;\n    return canListen ? ((/** @type {?} */ (window))).matchMedia(query) : (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => {\n        }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => {\n        }),\n        onchange: null,\n        /**\n         * @return {?}\n         */\n        addEventListener() {\n        },\n        /**\n         * @return {?}\n         */\n        removeEventListener() {\n        },\n        /**\n         * @return {?}\n         */\n        dispatchEvent() {\n            return false;\n        }\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    // Allow fallback to overlapping mediaQueries\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     * @param {?} _breakpoints\n     */\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n    clearAll() {\n        this.registry.forEach((/**\n         * @param {?} mql\n         * @return {?}\n         */\n        (mql) => {\n            ((/** @type {?} */ (mql))).destroy();\n        }));\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n    activate(mediaQuery, useOverlaps = false) {\n        useOverlaps = useOverlaps || this.useOverlaps;\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n    _validateQuery(queryOrAlias) {\n        /** @type {?} */\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return (bp && bp.mediaQuery) || queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @private\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            /** @type {?} */\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            /** @type {?} */\n            const alias = bp ? bp.alias : 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     * @private\n     * @param {?} aliases\n     * @return {?}\n     */\n    _activateByAlias(aliases) {\n        /** @type {?} */\n        const activate = (/**\n         * @param {?} alias\n         * @return {?}\n         */\n        (alias) => {\n            /** @type {?} */\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp ? bp.mediaQuery : alias);\n        });\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        /** @type {?} */\n        const mql = (/** @type {?} */ (this.registry.get(mediaQuery)));\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Deactivate all current MQLs and reset the buffer\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    _deactivateAll() {\n        (/** @type {?} */ (this)).registry.forEach((/**\n         * @param {?} it\n         * @return {?}\n         */\n        (it) => {\n            ((/** @type {?} */ (it))).deactivate();\n        }));\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) { return new (t || MockMatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(BreakPointRegistry)); };\nMockMatchMedia.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MockMatchMedia, factory: MockMatchMedia.ɵfac });\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: BreakPointRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MockMatchMedia, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: BreakPointRegistry }]; }, null); })();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n    /**\n     * @param {?} _mediaQuery\n     */\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    /**\n     * @return {?}\n     */\n    get matches() {\n        return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((/**\n             * @param {?} callback\n             * @return {?}\n             */\n            (callback) => {\n                /** @type {?} */\n                const cb = (/** @type {?} */ (callback));\n                cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n            }));\n        }\n        return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((/**\n             * @param {?} callback\n             * @return {?}\n             */\n            (callback) => {\n                /** @type {?} */\n                const cb = (/** @type {?} */ (callback));\n                cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n            }));\n        }\n        return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            /** @type {?} */\n            const cb = (/** @type {?} */ (listener));\n            cb.call(this, (/** @type {?} */ ({ matches: this.matches, media: this.media })));\n        }\n    }\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n    removeListener(_) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    addEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    removeEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\nconst MockMatchMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRINT = 'print';\n/** @type {?} */\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    /**\n     * @param {?} breakpoints\n     * @param {?} layoutConfig\n     * @param {?} _document\n     */\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        /**\n         * Is this service currently in Print-mode ?\n         */\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /**\n     * Add 'print' mediaQuery: to listen for matchMedia activations\n     * @param {?} queries\n     * @return {?}\n     */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /**\n     * Is the MediaChange event for any 'print' \\@media\n     * @param {?} e\n     * @return {?}\n     */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /**\n     * What is the desired mqAlias to use while printing?\n     * @return {?}\n     */\n    get printAlias() {\n        return this.layoutConfig.printWithBreakpoints || [];\n    }\n    /**\n     * Lookup breakpoints associated with print aliases.\n     * @return {?}\n     */\n    get printBreakPoints() {\n        return (/** @type {?} */ (this.printAlias\n            .map((/**\n         * @param {?} alias\n         * @return {?}\n         */\n        alias => this.breakpoints.findByAlias(alias)))\n            .filter((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp !== null))));\n    }\n    /**\n     * Lookup breakpoint associated with mediaQuery\n     * @param {?} __0\n     * @return {?}\n     */\n    getEventBreakpoints({ mediaQuery }) {\n        /** @type {?} */\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        /** @type {?} */\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /**\n     * Update event with printAlias mediaQuery information\n     * @param {?} event\n     * @return {?}\n     */\n    updateEvent(event) {\n        /** @type {?} */\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp ? bp.mediaQuery : '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    /**\n     * @private\n     * @param {?} target\n     * @return {?}\n     */\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        /** @type {?} */\n        const beforePrintListener = (/**\n         * @return {?}\n         */\n        () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        });\n        /** @type {?} */\n        const afterPrintListener = (/**\n         * @return {?}\n         */\n        () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        });\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS filter operator with partial application\n     * @param {?} target\n     * @return {?} pipeable filter predicate\n     */\n    interceptEvents(target) {\n        this.registerBeforeAfterPrintHooks(target);\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n            }\n            else {\n                this.collectActivations(event);\n            }\n        });\n    }\n    /**\n     * Stop mediaChange event propagation in event streams\n     * @return {?}\n     */\n    blockPropagation() {\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        });\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     * @protected\n     * @param {?} target\n     * @param {?} bpList\n     * @return {?}\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /**\n     * For any print de-activations, reset the entire print queue\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     * @param {?} event\n     * @return {?}\n     */\n    collectActivations(event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!event.matches) {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                if (bp) { // Deactivating a breakpoint\n                    this.deactivations.push(bp);\n                    this.deactivations.sort(sortDescendingPriority);\n                }\n            }\n            else if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n            }\n        }\n    }\n    /**\n     * Teardown logic for the service.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach((/**\n             * @param {?} l\n             * @return {?}\n             */\n            l => this._document.defaultView.removeEventListener('beforeprint', l)));\n            this.afterPrintEventListeners.forEach((/**\n             * @param {?} l\n             * @return {?}\n             */\n            l => this._document.defaultView.removeEventListener('afterprint', l)));\n        }\n    }\n}\nPrintHook.ɵfac = function PrintHook_Factory(t) { return new (t || PrintHook)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */ PrintHook.ɵprov = ɵɵdefineInjectable({ factory: function PrintHook_Factory() { return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT)); }, token: PrintHook, providedIn: \"root\" });\n/** @nocollapse */\nPrintHook.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrintHook, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [LAYOUT_CONFIG]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /**\n         * Sorted queue with prioritized print breakpoints\n         */\n        this.printBreakpoints = [];\n    }\n    /**\n     * @param {?} bpList\n     * @return {?}\n     */\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => this.addBreakpoint(bp)));\n        return this.printBreakpoints;\n    }\n    /**\n     * Add Print breakpoint to queue\n     * @param {?} bp\n     * @return {?}\n     */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            /** @type {?} */\n            const bpInList = this.printBreakpoints.find((/**\n             * @param {?} it\n             * @return {?}\n             */\n            it => it.mediaQuery === bp.mediaQuery));\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /**\n     * Restore original activated breakpoints and clear internal caches\n     * @return {?}\n     */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\nfunction isPrintBreakPoint(bp) {\n    return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} hook\n     */\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /**\n         * Filter MediaChange notifications for overlapping breakpoints\n         */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n        this.media$ = this._media$.pipe(filter((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => changes.length > 0)), map((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => changes[0])));\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     * @return {?}\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param {?} value One or more media queries (or aliases) to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isActive(value) {\n        /** @type {?} */\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some((/**\n         * @param {?} alias\n         * @return {?}\n         */\n        alias => {\n            /** @type {?} */\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        }));\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @private\n     * @return {?}\n     */\n    watchActivations() {\n        /** @type {?} */\n        const queries = this.breakpoints.items.map((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp.mediaQuery));\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @private\n     * @param {?} mqList\n     * @return {?}\n     */\n    buildObservable(mqList) {\n        /** @type {?} */\n        const hasChanges = (/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => {\n            /** @type {?} */\n            const isValidQuery = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => (change.mediaQuery.length > 0));\n            return (changes.filter(isValidQuery).length > 0);\n        });\n        /** @type {?} */\n        const excludeOverlaps = (/**\n         * @param {?} changes\n         * @return {?}\n         */\n        (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter((/**\n             * @param {?} change\n             * @return {?}\n             */\n            change => {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return !bp ? true : !bp.overlapping;\n            }));\n        });\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => change.matches)), debounceTime(0, asapScheduler), switchMap((/**\n         * @param {?} _\n         * @return {?}\n         */\n        _ => of(this.findAllActivations()))), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     * @private\n     * @return {?}\n     */\n    findAllActivations() {\n        /** @type {?} */\n        const mergeMQAlias = (/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => {\n            /** @type {?} */\n            let bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        });\n        /** @type {?} */\n        const replaceWithPrintAlias = (/**\n         * @param {?} change\n         * @return {?}\n         */\n        (change) => {\n            return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        });\n        return this.matchMedia\n            .activations\n            .map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => new MediaChange(true, query)))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\nMediaObserver.ɵfac = function MediaObserver_Factory(t) { return new (t || MediaObserver)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(PrintHook)); };\n/** @nocollapse */ MediaObserver.ɵprov = ɵɵdefineInjectable({ factory: function MediaObserver_Factory() { return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook)); }, token: MediaObserver, providedIn: \"root\" });\n/** @nocollapse */\nMediaObserver.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia },\n    { type: PrintHook }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }]; }, null); })();\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\nfunction toMediaQuery(query, locator) {\n    /** @type {?} */\n    const bp = locator.findByAlias(query) || locator.findByQuery(query);\n    return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} layoutConfig\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param {?} list array of mediaQuery or alias strings\n     * @return {?}\n     */\n    activate(list) {\n        list = list.map((/**\n         * @param {?} it\n         * @return {?}\n         */\n        it => it.trim())); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     * @return {?}\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            /** @type {?} */\n            const extractQuery = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => change.mediaQuery);\n            /** @type {?} */\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     * @private\n     * @return {?}\n     */\n    prepareAutoRestore() {\n        /** @type {?} */\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        /** @type {?} */\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            /** @type {?} */\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     * @private\n     * @return {?}\n     */\n    deactivateAll() {\n        /** @type {?} */\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     * @private\n     * @return {?}\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            /** @type {?} */\n            const toMediaChange = (/**\n             * @param {?} query\n             * @return {?}\n             */\n            (query) => new MediaChange(true, query));\n            /** @type {?} */\n            const mergeMQAlias = (/**\n             * @param {?} change\n             * @return {?}\n             */\n            (change) => {\n                /** @type {?} */\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            });\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     * @private\n     * @param {?} list\n     * @return {?}\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     * @private\n     * @param {?} queries\n     * @param {?=} matches\n     * @return {?}\n     */\n    simulateMediaChanges(queries, matches = true) {\n        /** @type {?} */\n        const toMediaQuery = (/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => {\n            /** @type {?} */\n            const locator = this.breakpoints;\n            /** @type {?} */\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        });\n        /** @type {?} */\n        const emitChangeEvent = (/**\n         * @param {?} query\n         * @return {?}\n         */\n        (query) => this.emitChangeEvent(matches, query));\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     * @private\n     * @param {?} queries\n     * @param {?} matches\n     * @return {?}\n     */\n    forceRegistryMatches(queries, matches) {\n        /** @type {?} */\n        const registry = new Map();\n        queries.forEach((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => {\n            registry.set(query, (/** @type {?} */ ({ matches })));\n        }));\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     * @private\n     * @return {?}\n     */\n    cacheRegistryMatches() {\n        /** @type {?} */\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            target.set(key, value);\n        }));\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     * @private\n     * @return {?}\n     */\n    restoreRegistryMatches() {\n        /** @type {?} */\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            target.set(key, value);\n        }));\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     * @private\n     * @param {?} matches\n     * @param {?} query\n     * @return {?}\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) { return new (t || MediaTrigger)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */ MediaTrigger.ɵprov = ɵɵdefineInjectable({ factory: function MediaTrigger_Factory() { return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT)); }, token: MediaTrigger, providedIn: \"root\" });\n/** @nocollapse */\nMediaTrigger.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaTrigger, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [LAYOUT_CONFIG]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n    for (let key in target) {\n        /** @type {?} */\n        let value = target[key] || '';\n        switch (key) {\n            case 'display':\n                if (value === 'flex') {\n                    target['display'] = [\n                        '-webkit-flex',\n                        'flex'\n                    ];\n                }\n                else if (value === 'inline-flex') {\n                    target['display'] = [\n                        '-webkit-inline-flex',\n                        'inline-flex'\n                    ];\n                }\n                else {\n                    target['display'] = value;\n                }\n                break;\n            case 'align-items':\n            case 'align-self':\n            case 'align-content':\n            case 'flex':\n            case 'flex-basis':\n            case 'flex-flow':\n            case 'flex-grow':\n            case 'flex-shrink':\n            case 'flex-wrap':\n            case 'justify-content':\n                target['-webkit-' + key] = value;\n                break;\n            case 'flex-direction':\n                value = value || 'row';\n                target['-webkit-flex-direction'] = value;\n                target['flex-direction'] = value;\n                break;\n            case 'order':\n                target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n                break;\n        }\n    }\n    return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StyleUtils {\n    /**\n     * @param {?} _serverStylesheet\n     * @param {?} _serverModuleLoaded\n     * @param {?} _platformId\n     * @param {?} layoutConfig\n     */\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n    applyStyleToElement(element, style, value = null) {\n        /** @type {?} */\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n    applyStyleToElements(style, elements = []) {\n        /** @type {?} */\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach((/**\n         * @param {?} el\n         * @return {?}\n         */\n        el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        }));\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n    getFlowDirection(target) {\n        /** @type {?} */\n        const query = 'flex-direction';\n        /** @type {?} */\n        let value = this.lookupStyle(target, query);\n        /** @type {?} */\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    /**\n     * @param {?} target\n     * @return {?}\n     */\n    hasWrap(target) {\n        /** @type {?} */\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) || '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        /** @type {?} */\n        let value = '';\n        if (element) {\n            /** @type {?} */\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @private\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const el = styles[key];\n            /** @type {?} */\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    _setServerStyle(element, styleName, styleValue) {\n        styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        styleMap[styleName] = styleValue || '';\n        this._writeStyleAttribute(element, styleMap);\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    _getServerStyle(element, styleName) {\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        return styleMap[styleName] || '';\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _readStyleAttribute(element) {\n        /** @type {?} */\n        const styleMap = {};\n        /** @type {?} */\n        const styleAttribute = element.getAttribute('style');\n        if (styleAttribute) {\n            /** @type {?} */\n            const styleList = styleAttribute.split(/;+/g);\n            for (let i = 0; i < styleList.length; i++) {\n                /** @type {?} */\n                const style = styleList[i].trim();\n                if (style.length > 0) {\n                    /** @type {?} */\n                    const colonIndex = style.indexOf(':');\n                    if (colonIndex === -1) {\n                        throw new Error(`Invalid CSS style: ${style}`);\n                    }\n                    /** @type {?} */\n                    const name = style.substr(0, colonIndex).trim();\n                    styleMap[name] = style.substr(colonIndex + 1).trim();\n                }\n            }\n        }\n        return styleMap;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n    _writeStyleAttribute(element, styleMap) {\n        /** @type {?} */\n        let styleAttrValue = '';\n        for (const key in styleMap) {\n            /** @type {?} */\n            const newValue = styleMap[key];\n            if (newValue) {\n                styleAttrValue += key + ':' + styleMap[key] + ';';\n            }\n        }\n        element.setAttribute('style', styleAttrValue);\n    }\n}\nStyleUtils.ɵfac = function StyleUtils_Factory(t) { return new (t || StyleUtils)(ɵngcc0.ɵɵinject(StylesheetMap), ɵngcc0.ɵɵinject(SERVER_TOKEN), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LAYOUT_CONFIG)); };\n/** @nocollapse */ StyleUtils.ɵprov = ɵɵdefineInjectable({ factory: function StyleUtils_Factory() { return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG)); }, token: StyleUtils, providedIn: \"root\" });\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [\n    { type: StylesheetMap },\n    { type: Boolean, decorators: [{ type: Inject, args: [SERVER_TOKEN,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StyleUtils, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: StylesheetMap }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [SERVER_TOKEN]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [LAYOUT_CONFIG]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\nclass StyleBuilder {\n    constructor() {\n        /**\n         * Whether to cache the generated output styles\n         */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     * @param {?} _input\n     * @param {?} _styles\n     * @param {?=} _parent\n     * @return {?}\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    /** @type {?} */\n    let parts = [grow, shrink, basis];\n    /** @type {?} */\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        /** @type {?} */\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        /** @type {?} */\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    /**\n     * @param {?} matchMedia\n     * @param {?} breakpoints\n     * @param {?} hook\n     */\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this.activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    /**\n     * @return {?}\n     */\n    get activatedAlias() {\n        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param {?} mc\n     * @return {?}\n     */\n    onMediaChange(mc) {\n        /** @type {?} */\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n                this.activatedBreakpoints.push(bp);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     * @return {?}\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} bp\n     * @return {?}\n     */\n    getValue(element, key, bp) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    hasValue(element, key) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param {?} element the element in question\n     * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param {?} val the value for the breakpoint\n     * @param {?} bp the breakpoint suffix (empty string = default)\n     * @return {?}\n     */\n    setValue(element, key, val, bp) {\n        /** @type {?} */\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            /** @type {?} */\n            const values = (bpMap.get(bp) || new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        /** @type {?} */\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /**\n     * Track element value changes for a specific key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.element === element && v.key === key)));\n    }\n    /**\n     * update all styles for all elements on the current breakpoint\n     * @return {?}\n     */\n    updateStyles() {\n        this.elementMap.forEach((/**\n         * @param {?} bpMap\n         * @param {?} el\n         * @return {?}\n         */\n        (bpMap, el) => {\n            /** @type {?} */\n            const keyMap = new Set((/** @type {?} */ (this.elementKeyMap.get(el))));\n            /** @type {?} */\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((/**\n                 * @param {?} v\n                 * @param {?} k\n                 * @return {?}\n                 */\n                (v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                }));\n            }\n            keyMap.forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    /** @type {?} */\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            }));\n        }));\n    }\n    /**\n     * clear the styles for a given element\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    clearElement(element, key) {\n        /** @type {?} */\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            /** @type {?} */\n            const clearFn = (/** @type {?} */ (builders.get(key)));\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    updateElement(element, key, value) {\n        /** @type {?} */\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            /** @type {?} */\n            const updateFn = (/** @type {?} */ (builders.get(key)));\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param {?} element\n     * @return {?}\n     */\n    releaseElement(element) {\n        /** @type {?} */\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => s.unsubscribe()));\n            this.watcherMap.delete(element);\n        }\n        /** @type {?} */\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((/**\n             * @param {?} _\n             * @param {?} s\n             * @return {?}\n             */\n            (_, s) => elementMap.delete(s)));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param {?} element\n     * @param {?=} key\n     * @return {?}\n     */\n    triggerUpdate(element, key) {\n        /** @type {?} */\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            /** @type {?} */\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((/**\n                     * @param {?} v\n                     * @param {?} k\n                     * @return {?}\n                     */\n                    (v, k) => this.updateElement(element, k, v)));\n                }\n            }\n        }\n    }\n    /**\n     * Cross-reference for HTMLElement with directive key\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n    buildElementKeyMap(element, key) {\n        /** @type {?} */\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @param {?} triggers\n     * @return {?}\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            /** @type {?} */\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            /** @type {?} */\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                /** @type {?} */\n                const newSubscription = merge(...triggers).subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                }));\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /**\n     * Breakpoint locator by mediaQuery\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @private\n     * @param {?} bpMap\n     * @param {?=} key\n     * @return {?}\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            /** @type {?} */\n            const activatedBp = this.activatedBreakpoints[i];\n            /** @type {?} */\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        /** @type {?} */\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     * @private\n     * @return {?}\n     */\n    observeActivations() {\n        /** @type {?} */\n        const target = (/** @type {?} */ ((/** @type {?} */ (this))));\n        /** @type {?} */\n        const queries = this.breakpoints.items.map((/**\n         * @param {?} bp\n         * @return {?}\n         */\n        bp => bp.mediaQuery));\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) { return new (t || MediaMarshaller)(ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(PrintHook)); };\n/** @nocollapse */ MediaMarshaller.ɵprov = ɵɵdefineInjectable({ factory: function MediaMarshaller_Factory() { return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook)); }, token: MediaMarshaller, providedIn: \"root\" });\n/** @nocollapse */\nMediaMarshaller.ctorParameters = () => [\n    { type: MatchMedia },\n    { type: BreakPointRegistry },\n    { type: PrintHook }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMarshaller, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }]; }, null); })();\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\nfunction initBuilderMap(map$$1, element, key, input) {\n    if (input !== undefined) {\n        /** @type {?} */\n        let oldMap = map$$1.get(element);\n        if (!oldMap) {\n            oldMap = new Map();\n            map$$1.set(element, oldMap);\n        }\n        oldMap.set(key, input);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}